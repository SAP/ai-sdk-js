/*
 * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.
 *
 * This is a generated file powered by the SAP Cloud SDK for JavaScript.
 */
import type { AzureOpenAiChatCompletionsRequestCommon } from './chat-completions-request-common.js';
import type { AzureOpenAiChatCompletionRequestMessage } from './chat-completion-request-message.js';
import type { AzureOpenAiAzureChatExtensionConfiguration } from './azure-chat-extension-configuration.js';
import type { AzureOpenAiParallelToolCalls } from './parallel-tool-calls.js';
import type { AzureOpenAiResponseFormatText } from './response-format-text.js';
import type { AzureOpenAiResponseFormatJsonObject } from './response-format-json-object.js';
import type { AzureOpenAiResponseFormatJsonSchema } from './response-format-json-schema.js';
import type { AzureOpenAiChatCompletionTool } from './chat-completion-tool.js';
import type { AzureOpenAiChatCompletionToolChoiceOption } from './chat-completion-tool-choice-option.js';
import type { AzureOpenAiChatCompletionFunctionCallOption } from './chat-completion-function-call-option.js';
import type { AzureOpenAiChatCompletionFunctions } from './chat-completion-functions.js';
/**
 * Representation of the 'AzureOpenAiCreateChatCompletionRequest' schema.
 */
export type AzureOpenAiCreateChatCompletionRequest =
  AzureOpenAiChatCompletionsRequestCommon & {
    /**
     * A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
     * Min Items: 1.
     */
    messages: AzureOpenAiChatCompletionRequestMessage[];
    /**
     *   The configuration entries for Azure OpenAI chat extensions that use them.
     *   This additional specification is only compatible with Azure OpenAI.
     */
    data_sources?: AzureOpenAiAzureChatExtensionConfiguration[];
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     *
     * Maximum: 2.
     * Minimum: -2.
     */
    frequency_penalty?: number | null;
    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     *
     * Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     *
     */
    logit_bias?: Record<string, number> | null;
    /**
     * Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
     */
    logprobs?: boolean | null;
    /**
     * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
     * Maximum: 20.
     */
    top_logprobs?: number | null;
    /**
     * The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.
     *
     * The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
     *
     */
    max_tokens?: number | null;
    /**
     * How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
     * @example 1
     * Default: 1.
     * Maximum: 128.
     * Minimum: 1.
     */
    n?: number | null;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     *
     * Maximum: 2.
     * Minimum: -2.
     */
    presence_penalty?: number | null;
    parallel_tool_calls?: AzureOpenAiParallelToolCalls;
    /**
     * An object specifying the format that the model must output. Compatible with [GPT-4o](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-4-and-gpt-4-turbo-models), [GPT-4o mini](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-4-and-gpt-4-turbo-models), [GPT-4 Turbo](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-4-and-gpt-4-turbo-models) and all [GPT-3.5](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-35) Turbo models newer than `gpt-3.5-turbo-1106`.
     *
     * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which guarantees the model will match your supplied JSON schema.
     *
     * Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.
     *
     * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
     *
     */
    response_format?:
      | AzureOpenAiResponseFormatText
      | AzureOpenAiResponseFormatJsonObject
      | AzureOpenAiResponseFormatJsonSchema;
    /**
     * This feature is in Beta.
     * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
     * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
     *
     * Maximum: 9223372036854776000.
     * Minimum: -9223372036854776000.
     */
    seed?: number | null;
    /**
     * Up to 4 sequences where the API will stop generating further tokens.
     *
     */
    stop?: string | string[];
    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
     *
     */
    stream?: boolean | null;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     *
     * We generally recommend altering this or `top_p` but not both.
     *
     * @example 1
     * Default: 1.
     * Maximum: 2.
     */
    temperature?: number | null;
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
     *
     * We generally recommend altering this or `temperature` but not both.
     *
     * @example 1
     * Default: 1.
     * Maximum: 1.
     */
    top_p?: number | null;
    /**
     * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
     *
     */
    tools?: AzureOpenAiChatCompletionTool[];
    tool_choice?: AzureOpenAiChatCompletionToolChoiceOption;
    /**
     * Deprecated in favor of `tool_choice`.
     *
     * Controls which (if any) function is called by the model.
     * `none` means the model will not call a function and instead generates a message.
     * `auto` means the model can pick between generating a message or calling a function.
     * Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
     *
     * `none` is the default when no functions are present. `auto` is the default if functions are present.
     *
     * @deprecated
     */
    function_call?:
      | 'none'
      | 'auto'
      | AzureOpenAiChatCompletionFunctionCallOption;
    /**
     * Deprecated in favor of `tools`.
     *
     * A list of functions the model may generate JSON inputs for.
     *
     * @deprecated
     * Min Items: 1.
     * Max Items: 128.
     */
    functions?: AzureOpenAiChatCompletionFunctions[];
    /**
     * A unique identifier representing your end-user, which can help to monitor and detect abuse.
     *
     * @example "user-1234"
     */
    user?: string;
  } & Record<string, any>;
