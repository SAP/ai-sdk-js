import type { HttpResponse } from '@sap-cloud-sdk/http-client';
import type {
  AzureOpenAiChatCompletionMessageToolCalls,
  AzureOpenAiChatCompletionResponseMessage,
  AzureOpenAiCompletionUsage,
  AzureOpenAiCreateChatCompletionResponse
} from './client/inference/schema/index.js';

/**
 * Azure OpenAI chat completion response.
 */
export class AzureOpenAiChatCompletionResponse {
  /**
   * The chat completion response.
   */
  public readonly _data: AzureOpenAiCreateChatCompletionResponse;
  constructor(public readonly rawResponse: HttpResponse) {
    this._data = rawResponse.data;
  }

  /**
   * Usage of tokens in the response.
   * @returns Token usage.
   */
  getTokenUsage(): AzureOpenAiCompletionUsage | undefined {
    return this._data.usage;
  }

  /**
   * Reason for stopping the completion.
   * @param choiceIndex - The index of the choice to parse.
   * @returns The finish reason.
   */
  getFinishReason(
    choiceIndex = 0
  ):
    | AzureOpenAiCreateChatCompletionResponse['choices'][0]['finish_reason']
    | undefined {
    return this.findChoiceByIndex(choiceIndex)?.finish_reason;
  }

  /**
   * Parses the Azure OpenAI response and returns the content.
   * @param choiceIndex - The index of the choice to parse.
   * @returns The message content.
   */
  getContent(choiceIndex = 0): string | undefined | null {
    return this.findChoiceByIndex(choiceIndex)?.message
      ?.content;
  }

  /**
   * Parses the Azure OpenAI response and returns the tool calls generated by the model.
   * @param choiceIndex - The index of the choice to parse.
   * @returns The message tool calls.
   */
  getToolCalls(choiceIndex = 0): AzureOpenAiChatCompletionMessageToolCalls | undefined {
    const choice = this.findChoiceByIndex(choiceIndex);
    return choice?.message?.tool_calls;
  }

  /**
   * Parses the Azure OpenAI response and returns the refusal message generated by the model.
   * @param choiceIndex - The index of the choice to parse.
   * @returns The refusal string.
   */
  getRefusal(choiceIndex = 0): string | null | undefined {
    const choice = this.findChoiceByIndex(choiceIndex);
    return choice?.message?.refusal;
  }

  /**
   * Gets the assistant message from the response.
   * @param choiceIndex - The index of the choice to use (default is 0).
   * @returns The assistant message.
   */
  getAssistantMessage(choiceIndex = 0): AzureOpenAiChatCompletionResponseMessage | undefined {
    return this.findChoiceByIndex(choiceIndex)?.message;
  }

  /**
   * Parses the response and returns the choice by index.
   * @param index - The index of the choice to find.
   * @returns An {@link LLMChoice} object associated with the index.
   */
  findChoiceByIndex(index: number): AzureOpenAiCreateChatCompletionResponse['choices'][number] | undefined {
    return this.getChoices().find((c: { index: number }) => c.index === index);
  }

  private getChoices(): AzureOpenAiCreateChatCompletionResponse['choices'] {
    return this._data.choices;
  }
}
