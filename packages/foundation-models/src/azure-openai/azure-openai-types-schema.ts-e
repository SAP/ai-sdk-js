// Generated by ts-to-zod
import { z } from 'zod';

export const azureOpenAiChatSystemMessageSchema = z.object({
  role: z.literal('system'),
  name: z.string().optional(),
  content: z.string()
});

export const azureOpenAiChatUserMessageSchema = z.object({
  role: z.literal('user'),
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(
      z.union([
        z.object({
          type: z.literal('text'),
          text: z.string()
        }),
        z.object({
          type: z.literal('image_url'),
          image_url: z.union([
            z.string(),
            z.object({
              url: z.string(),
              detail: z
                .union([z.literal('auto'), z.literal('low'), z.literal('high')])
                .optional()
                .default('auto')
            })
          ])
        })
      ])
    )
  ])
});

export const azureOpenAiChatFunctionCallSchema = z.object({
  name: z.string(),
  arguments: z.string()
});

export const azureOpenAiChatToolCallSchema = z.object({
  id: z.string(),
  type: z.literal('function'),
  function: azureOpenAiChatFunctionCallSchema
});

export const azureOpenAiChatToolMessageSchema = z.object({
  role: z.literal('tool'),
  content: z.string(),
  tool_call_id: z.string()
});

export const azureOpenAiChatFunctionMessageSchema = z.object({
  role: z.literal('function'),
  content: z.string().nullable(),
  name: z.string()
});

export const azureOpenAiChatAssistantMessageSchema = z.object({
  role: z.literal('assistant'),
  name: z.string().optional(),
  content: z.string().optional(),
  function_call: azureOpenAiChatFunctionCallSchema.optional(),
  tool_calls: z.array(azureOpenAiChatToolCallSchema).optional()
});

export const azureOpenAiChatCompletionFunctionSchema = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.record(z.unknown())
});

export const azureOpenAiChatCompletionToolSchema = z.object({
  type: z.literal('function'),
  function: azureOpenAiChatCompletionFunctionSchema
});

export const azureOpenAiCompletionParametersSchema = z.object({
  max_tokens: z.number().optional(),
  temperature: z.number().optional(),
  top_p: z.number().optional(),
  logit_bias: z.record(z.unknown()).optional(),
  user: z.string().optional(),
  n: z.number().optional(),
  stop: z.union([z.string(), z.array(z.string())]).optional(),
  presence_penalty: z.number().optional(),
  frequency_penalty: z.number().optional()
});

export const azureOpenAiChatMessageSchema = z.union([
  azureOpenAiChatSystemMessageSchema,
  azureOpenAiChatUserMessageSchema,
  azureOpenAiChatAssistantMessageSchema,
  azureOpenAiChatToolMessageSchema,
  azureOpenAiChatFunctionMessageSchema
]);

export const azureOpenAiEmbeddingParametersSchema = z.object({
  input: z.union([z.array(z.string()), z.string()]),
  user: z.string().optional()
});

export const azureOpenAiUsageSchema = z.object({
  completion_tokens: z.number(),
  prompt_tokens: z.number(),
  total_tokens: z.number()
});

export const azureOpenAiErrorBaseSchema = z.object({
  code: z.string().optional(),
  message: z.string().optional()
});

export const azureOpenAiContentFilterResultBaseSchema = z.object({
  filtered: z.boolean()
});

export const azureOpenAiContentFilterDetectedResultSchema =
  azureOpenAiContentFilterResultBaseSchema.extend({
    detected: z.boolean()
  });

export const azureOpenAiContentFilterSeverityResultSchema =
  azureOpenAiContentFilterResultBaseSchema.extend({
    severity: z.union([
      z.literal('safe'),
      z.literal('low'),
      z.literal('medium'),
      z.literal('high')
    ])
  });

export const azureOpenAiEmbeddingOutputSchema = z.object({
  object: z.literal('list'),
  model: z.string(),
  data: z.tuple([
    z.object({
      object: z.literal('embedding'),
      embedding: z.array(z.number()),
      index: z.number()
    })
  ]),
  usage: z.object({
    prompt_tokens: z.number(),
    total_tokens: z.number()
  })
});

export const azureOpenAiChatCompletionParametersSchema =
  azureOpenAiCompletionParametersSchema.extend({
    messages: z.array(azureOpenAiChatMessageSchema),
    response_format: z
      .object({
        type: z
          .union([z.literal('text'), z.literal('json_object')])
          .default('text')
      })
      .optional(),
    seed: z.number().optional(),
    functions: z.array(azureOpenAiChatCompletionFunctionSchema).optional(),
    tools: z.array(azureOpenAiChatCompletionToolSchema).optional(),
    tool_choice: z
      .union([
        z.literal('none'),
        z.literal('auto'),
        z.object({
          type: z.literal('function'),
          function: z.object({
            name: z.string()
          })
        })
      ])
      .optional()
  });

export const azureOpenAiContentFilterResultsBaseSchema = z.object({
  sexual: azureOpenAiContentFilterSeverityResultSchema.optional(),
  violence: azureOpenAiContentFilterSeverityResultSchema.optional(),
  hate: azureOpenAiContentFilterSeverityResultSchema.optional(),
  self_harm: azureOpenAiContentFilterSeverityResultSchema.optional(),
  profanity: azureOpenAiContentFilterDetectedResultSchema.optional(),
  error: azureOpenAiErrorBaseSchema.optional()
});

export const azureOpenAiContentFilterPromptResultsSchema =
  azureOpenAiContentFilterResultsBaseSchema.extend({
    jailbreak: azureOpenAiContentFilterDetectedResultSchema.optional()
  });

export const azureOpenAiPromptFilterResultSchema = z.object({
  prompt_index: z.number().optional(),
  content_filter_results: azureOpenAiContentFilterPromptResultsSchema.optional()
});

export const azureOpenAiCompletionOutputSchema = z.object({
  created: z.number(),
  id: z.string(),
  model: z.string(),
  object: z.union([z.literal('chat.completion'), z.literal('text_completion')]),
  usage: azureOpenAiUsageSchema,
  prompt_filter_results: z.array(azureOpenAiPromptFilterResultSchema).optional()
});

export const azureOpenAiCompletionChoiceSchema = z.object({
  finish_reason: z.string().optional(),
  index: z.number(),
  content_filter_results: azureOpenAiContentFilterPromptResultsSchema.optional()
});

export const azureOpenAiChatCompletionChoiceSchema =
  azureOpenAiCompletionChoiceSchema.extend({
    message: azureOpenAiChatAssistantMessageSchema
  });

export const azureOpenAiChatCompletionOutputSchema =
  azureOpenAiCompletionOutputSchema.extend({
    choices: z.array(azureOpenAiChatCompletionChoiceSchema),
    system_fingerprint: z.string().nullable()
  });
