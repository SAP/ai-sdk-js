openapi: 3.0.0
info:
  title: Document Grounding Vector API
  version: 0.1.0
  description: 'SAP AI Core - API Specification for document grounding vector'
servers:
  - url: '/api/v1/lm/document-grounding/vector'
paths:
  '/collections':
    get:
      parameters:
        - in: header
          name: AI-Resource-Group
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/top'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/count'
      tags:
        - collections
      summary: Get collections
      description: Gets a list of collections.
      operationId: vector.v1.vector_endpoints.get_all_collections
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionsListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      parameters:
        - in: header
          name: AI-Resource-Group
          required: true
          schema:
            type: string
      tags:
        - collections
      summary: Create collection
      description: Creates a collection. This operation is asynchronous. Poll the collection resource and check the status field to understand creation status.
      operationId: vector.v1.vector_endpoints.create_collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionRequest'
        required: true
      responses:
        '202':
          description: Successful Response
          headers:
            Location:
              description: The newly created collections monitor url
              schema:
                $ref: '#/components/schemas/CollectionPendingResponse'
                type: string
                format: uri

        '400':
          $ref: '#/components/responses/BadRequest'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  '/collections/{collectionId}':
    get:
      tags:
        - collections
      summary: Get collection by ID
      description: Gets a specific collection by ID.
      operationId: vector.v1.vector_endpoints.get_collection_by_id
      parameters:
        - in: header
          name: AI-Resource-Group
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: Collectionid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      tags:
        - collections
      summary: Delete collection by ID
      description: Deletes a specific collection by ID. This operation is asynchronous. Poll the collection for a 404 status code.
      operationId: vector.v1.vector_endpoints.delete_collection
      parameters:
        - in: header
          name: AI-Resource-Group
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            title: Collectionid
      responses:
        '202':
          description: Successful Response
          headers:
            Location:
              description: The deleted collections monitor url
              schema:
                $ref: '#/components/schemas/CollectionPendingResponse'
                type: string
                format: uri
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  '/collections/{collectionId}/documents/{documentId}':
    get:
      tags:
        - documents
      summary: Get document by ID
      description: Gets a specific document in a collection by ID.
      operationId: vector.v1.vector_endpoints.get_document_by_id
      parameters:
        - in: header
          name: AI-Resource-Group
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: Collectionid
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: Documentid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      tags:
        - documents
      summary: Delete a document
      description: Deletes a specific document of a collection.
      operationId: vector.v1.vector_endpoints.delete_document
      parameters:
        - in: header
          name: AI-Resource-Group
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: Collectionid
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: Documentid
      responses:
        '204':
          description: Successful Response
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  '/collections/{collectionId}/documents':
    get:
      tags:
        - documents
      summary: Get documents
      description: Gets a list of documents of a collection.
      operationId: vector.v1.vector_endpoints.get_all_documents
      parameters:
        - in: header
          name: AI-Resource-Group
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: Collectionid
        - $ref: '#/components/parameters/top'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/count'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Documents'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    post:
      tags:
        - documents
      summary: Create documents in collection
      description: Create and stores one or multiple documents into a collection. If omitted, 'id' will be auto-generated.
      operationId: vector.v1.vector_endpoints.create_documents
      parameters:
        - in: header
          name: AI-Resource-Group
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: Collectionid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentCreateRequest'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentsListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    patch:
      tags:
        - documents
      summary: Upsert documents in collection
      description: Upserts the data of multiple documents into a collection.
      operationId: vector.v1.vector_endpoints.update_documents
      parameters:
        - in: header
          name: AI-Resource-Group
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: Collectionid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentUpdateRequest'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentsListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  '/search':
    post:
      parameters:
        - in: header
          name: AI-Resource-Group
          required: true
          schema:
            type: string
      tags:
        - search
      summary: Search chunk by vector
      operationId: vector.v1.vector_endpoints.search_chunk
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextSearchRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  '/collections/{id}/creationStatus':
    get:
      tags:
        - collections
      summary: Get collection status by ID
      description: Gets a specific collection status from monitor by ID.
      operationId: vector.v1.vector_endpoints.get_collection_creation_status
      parameters:
        - in: header
          name: AI-Resource-Group
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: ID
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CollectionCreatedResponse'
                  - $ref: '#/components/schemas/CollectionPendingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  '/collections/{id}/deletionStatus':
    get:
      tags:
        - collections
      summary: Get collection status by ID
      description: Gets a specific collection status from monitor by ID.
      operationId: vector.v1.vector_endpoints.get_collection_deletion_status
      parameters:
        - in: header
          name: AI-Resource-Group
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CollectionDeletedResponse'
                  - $ref: '#/components/schemas/CollectionPendingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
components:
  schemas:
    Chunk:
      properties:
        id:
          type: string
          title: Id
        content:
          type: string
          title: Content
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueListPair'
          title: Metadata
          default: []
      type: object
      required:
        - id
        - content
      title: Chunk
    DocumentKeyValueListPair:
      properties:
        key:
          type: string
          maxLength: 1024
          title: Key
        value:
          type: array
          items:
            type: string
            maxLength: 1024
          title: Value
        matchMode:
          type: string
          nullable: true
          title: MatchMode
          description: Default match mode for search filters
          default: ANY
          enum:
            - ANY
            - ALL
      type: object
      required:
        - key
        - value
      title: DocumentKeyValueListPair
    HTTPValidationError:
      properties:
        detail:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
      type: object
      title: HTTPValidationError
    KeyValueListPair:
      properties:
        key:
          type: string
          maxLength: 1024
          title: Key
        value:
          type: array
          items:
            type: string
            maxLength: 1024
          title: Value
      type: object
      required:
        - key
        - value
      title: KeyValueListPair
    Document-Output:
      properties:
        id:
          type: string
          format: uuid
          title: Id
        metadata:
          items:
            $ref: '#/components/schemas/DocumentKeyValueListPair'
          type: array
          title: Metadata
          default: []
        chunks:
          items:
            $ref: '#/components/schemas/Chunk'
          type: array
          title: Chunks
      type: object
      required:
        - id
        - chunks
      title: Document
    DocumentsChunk:
      properties:
        id:
          type: string
          format: uuid
          title: Id
        title:
          type: string
          title: Title
        metadata:
          items:
            $ref: '#/components/schemas/KeyValueListPair'
          type: array
          title: Metadata
          default: []
        documents:
          items:
            $ref: '#/components/schemas/Document-Output'
          type: array
          title: Documents
      type: object
      required:
        - id
        - title
        - documents
      title: Collection
    PerFilterSearchResult:
      properties:
        filterId:
          type: string
          title: Filterid
        results:
          items:
            $ref: '#/components/schemas/DocumentsChunk'
          type: array
          title: Results
      type: object
      required:
        - filterId
        - results
      title: PerFilterSearchResult
    SearchConfiguration:
      properties:
        maxChunkCount:
          nullable: true
          type: integer
          minimum: 0
          maximum: 0
          exclusiveMinimum: true
          title: Maxchunkcount
          description: Maximum number of chunks to be returned. Cannot be used with 'maxDocumentCount'.
        maxDocumentCount:
          nullable: true
          type: integer
          minimum: 0
          maximum: 0
          exclusiveMinimum: true
          title: Maxdocumentcount
          description: "[Only supports 'vector' dataRepositoryType] - Maximum number of documents to be returned. Cannot be used with 'maxChunkCount'. If maxDocumentCount is given, then only one chunk per document is returned."
      type: object
      title: SearchConfiguration
    SearchDocumentKeyValueListPair:
      properties:
        key:
          type: string
          maxLength: 1024
          title: Key
        value:
          type: array
          items:
            type: string
            maxLength: 1024
          title: Value
        selectMode:
          type: array
          items:
            $ref: '#/components/schemas/SearchSelectOptionEnum'
          title: Selectmode
          description: Select mode for search filters
      type: object
      required:
        - key
        - value
      title: SearchDocumentKeyValueListPair
    SearchResults:
      properties:
        results:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/PerFilterSearchResult'
          title: Results
          description: List of returned results.
      type: object
      required:
        - results
      title: SearchResults
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
    GenericError:
      properties:
        error:
          type: string
          title: Error
      type: object
      required:
        - error
      title: GenericError
    Error:
      properties:
        code:
          type: integer
          title: Code
        message:
          type: string
          title: Message
        target:
          type: string
          title: Target
        details:
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
          title: Details
      type: object
      required:
        - code
        - message
        - target
        - details
      title: Error
    ErrorDetail:
      properties:
        code:
          type: integer
          title: Code
        target:
          type: string
          title: Target
        message:
          type: string
          title: Message
      type: object
      required:
        - code
        - target
        - message
      title: ErrorDetail
    CollectionsListResponse:
      properties:
        resources:
          items:
            $ref: '#/components/schemas/Collection'
          type: array
          title: Collections
        count:
          type: integer
      type: object
      required:
        - resources
      title: CollectionsListResponse
      description: A response containing collections retrieved from the server.
    CollectionRequest:
      properties:
        title:
          type: string
          nullable: true
          title: Title
        embeddingConfig:
          $ref: '#/components/schemas/EmbeddingConfig'
        metadata:
          items:
            $ref: '#/components/schemas/KeyValueListPair'
          type: array
          title: Metadata
          description: >-
            Metadata attached to collection. Useful to restrict search to a
            subset of collections.
          default: []
      type: object
      required:
        - embeddingConfig
      title: CollectionRequest
      description: A request for creating a new, single collection.
    CollectionCreatedResponse:
      properties:
        collectionURL:
          type: string
          title: Collectionurl
        status:
          type: string
          title: Status
      type: object
      required:
        - collectionURL
        - status
      title: CollectionCreatedResponse
    CollectionPendingResponse:
      properties:
        Location:
          type: string
          title: Location
        status:
          type: string
          title: Status
      type: object
      required:
        - Location
        - status
      title: CollectionPendingResponse
    CollectionDeletedResponse:
      properties:
        collectionURL:
          type: string
          title: Collectionurl
        status:
          type: string
          title: Status
      type: object
      required:
        - collectionURL
        - status
      title: CollectionDeletedResponse
    BaseDocument:
      properties:
        chunks:
          items:
            $ref: '#/components/schemas/TextOnlyBaseChunk'
          type: array
          title: Chunks
        metadata:
          items:
            $ref: '#/components/schemas/DocumentKeyValueListPair'
          type: array
          title: Metadata
      type: object
      required:
        - chunks
        - metadata
      title: BaseDocument
      description: Base class for documents, document requests and responses.
    DocumentCreateRequest:
      properties:
        documents:
          items:
            $ref: '#/components/schemas/BaseDocument'
          type: array
          title: Documents
      type: object
      required:
        - documents
      title: DocumentCreateRequest
      description: >-
        A create request containing one or more new documents to create and
        store in a collection.
    Document-Input:
      properties:
        chunks:
          items:
            $ref: '#/components/schemas/TextOnlyBaseChunk'
          type: array
          title: Chunks
        metadata:
          items:
            $ref: '#/components/schemas/DocumentKeyValueListPair'
          type: array
          title: Metadata
        id:
          type: string
          format: uuid
          title: Id
          description: Unique identifier of a document.
      type: object
      required:
        - chunks
        - metadata
        - id
      title: Document
      description: A single document stored in a collection by ID.
    DocumentUpdateRequest:
      properties:
        documents:
          items:
            $ref: '#/components/schemas/Document-Input'
          type: array
          title: Documents
      type: object
      required:
        - documents
      title: DocumentUpdateRequest
      description: >-
        An update request containing one or more documents to update existing
        documents in a collection by ID.
    DocumentWithoutChunks:
      properties:
        metadata:
          items:
            $ref: '#/components/schemas/DocumentKeyValueListPair'
          type: array
          title: Metadata
        id:
          type: string
          format: uuid
          title: Id
          description: Unique identifier of a document.
      type: object
      required:
        - metadata
        - id
      title: DocumentWithoutChunks
      description: >-
        A single document stored in a collection by ID without exposing its
        chunks.
    DocumentsListResponse:
      properties:
        documents:
          items:
            $ref: '#/components/schemas/DocumentWithoutChunks'
          type: array
          title: Documents
      type: object
      required:
        - documents
      title: Documents
      description: A response containing documents created or updated, retrieved from the server.
    Documents:
      properties:
        resources:
          items:
            $ref: '#/components/schemas/DocumentWithoutChunks'
          type: array
          title: Documents
        count:
          type: integer
      type: object
      required:
        - resources
      title: Documents
      description: A response containing documents retrieved from the server.
    TextOnlyBaseChunk:
      properties:
        content:
          type: string
          title: Content
        metadata:
          items:
            $ref: '#/components/schemas/KeyValueListPair'
          type: array
          title: Metadata
      type: object
      required:
        - content
        - metadata
      title: TextOnlyBaseChunk
    DocumentResponse:
      properties:
        chunks:
          items:
            $ref: '#/components/schemas/TextOnlyBaseChunk'
          type: array
          title: Chunks
        metadata:
          items:
            $ref: '#/components/schemas/DocumentKeyValueListPair'
          type: array
          title: Metadata
        id:
          type: string
          format: uuid
          title: Id
          description: Unique identifier of a document.
      type: object
      required:
        - chunks
        - metadata
        - id
      title: DocumentResponse
      description: >-
        A response containing information about a newly created, single
        document.
    SearchSelectOptionEnum:
      type: string
      enum:
        - ignoreIfKeyAbsent
      default: ignoreIfKeyAbsent
      title: SearchSelectOptionEnum
    SearchFilter:
      properties:
        id:
          type: string
          title: Id
          description: Identifier of this SearchFilter - unique per request.
        collectionIds:
          items:
            type: string
          type: array
          title: Collectionids
        configuration:
          $ref: '#/components/schemas/SearchConfiguration'
        collectionMetadata:
          items:
            $ref: '#/components/schemas/KeyValueListPair'
          type: array
          maxItems: 2000
          title: Collectionmetadata
          description: >-
            Restrict collections considered during search to those annotated
            with the given metadata. Useful when combined with collections=['*']
          default: []
        documentMetadata:
          items:
            $ref: '#/components/schemas/SearchDocumentKeyValueListPair'
          type: array
          maxItems: 2000
          title: Documentmetadata
          description: >-
            Restrict documents considered during search to those annotated with
            the given metadata.
          default: []
        chunkMetadata:
          items:
            $ref: '#/components/schemas/KeyValueListPair'
          type: array
          maxItems: 2000
          title: Chunkmetadata
          description: >-
            Restrict chunks considered during search to those with the given
            metadata.
          default: []
      type: object
      required:
        - id
        - collectionIds
        - configuration
      title: SearchFilter
    TextSearchRequest:
      properties:
        query:
          type: string
          maxLength: 2000
          minLength: 1
          title: Query
          description: Query string
        filters:
          items:
            $ref: '#/components/schemas/SearchFilter'
          type: array
          title: Filters
      type: object
      required:
        - query
        - filters
      title: TextSearchRequest
    EmbeddingConfig:
      properties:
        modelName:
          type: string
          maxLength: 1024
          title: Modelname
          default: text-embedding-ada-002
      type: object
      title: EmbeddingConfig
    Collection:
      properties:
        title:
          type: string
          nullable: true
          title: Title
        embeddingConfig:
          $ref: '#/components/schemas/EmbeddingConfig'
        metadata:
          items:
            $ref: '#/components/schemas/KeyValueListPair'
          type: array
          title: Metadata
          description: >-
            Metadata attached to collection. Useful to restrict search to a
            subset of collections.
          default: []
        id:
          type: string
          format: uuid
          title: Id
          description: Unique identifier of a collection.
      type: object
      required:
        - embeddingConfig
        - id
      title: Collection
      description: A logical grouping of content.

    ### ###  ########################  ### ###
    ### ###  ###       Error      ###  ### ###
    ### ###  ########################  ### ###

    ApiError:
      required:
        - code
        - message
      type: object
      properties:
        code:
          description: >-
            Descriptive error code (not http status code).
          type: string
        message:
          description: plaintext error description
          type: string
        requestId:
          description: id of individual request
          type: string
        target:
          description: url that has been called
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/DetailsErrorResponse'

    DetailsErrorResponse:
      type: object
      properties:
        code:
          description: Descriptive error code (not http status code)
          type: string
        message:
          description: Plaintext error description
          type: string

  ### ***  *****************************************************  *** ###
  ### ***  ***              Start of responses               ***  *** ###
  ### ***  *****************************************************  *** ###

  responses:
    BadRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: '#/components/schemas/ApiError'
      description: The specification of the resource was incorrect

    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: '#/components/schemas/ApiError'

    UnprocessableEntity:
      description: There are validation issues with the data.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: '#/components/schemas/ApiError'
  parameters:
    top:
      name: $top
      description: Number of results to display
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
      example: 10

    skip:
      name: $skip
      description: Number of results to be skipped from the ordered list of results
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
      example: 10

    count:
      name: $count
      description: When the $count field is set to false, the response contains a count of the items present in the response. When the $count field is set to true, the response contains a count of all the items present on the server, and not just the ones in the response. When the $count field is not passed, it is false by default.
      in: query
      required: false
      schema:
        type: boolean
      example: true
