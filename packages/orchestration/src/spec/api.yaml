openapi: 3.0.0

servers:
  - url: '/'
    description: Internal Orchestration Service API

x-sap-shortText: 'Orchestration provides common capabilities for business AI scenarios, such as content filtering, data masking, and grounding'

info:
  title: Internal Orchestration Service API
  description: Orchestration is an inference service which provides common additional capabilities for business AI scenarios, such as content filtering and data masking. At the core of the service is the LLM module which allows for an easy, harmonized access to the language models of gen AI hub. The service is designed to be modular and extensible, allowing for the addition of new modules in the future. Each module can be configured independently and at runtime, allowing for a high degree of flexibility in the orchestration of AI services.
  contact:
    name: SAP AI Core
  version: 0.0.1

tags:
  - name: OrchestrationCompletion
    description: Run an orchestrated completion inference request

paths:
  /v1/completion:
    post:
      tags:
        - OrchestrationCompletion
      summary: orchestrated completion inference
      description: Run an orchestrated completion inference request
      operationId: orchestration.v1.endpoints.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionPostRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionPostResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CompletionPostResponseStreaming'
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/CommonError'

  /v2/embeddings:
    post:
      tags:
        - OrchestrationEmbeddings
      summary: orchestrated embeddings inference
      description: >
        Generate embeddings for input strings.
      operationId: orchestration.v1.endpoints.create_embeddings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingsPostRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingsPostResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/CommonError'

components:
  schemas:
    CompletionPostRequest:
      type: object
      required:
        - orchestration_config
      additionalProperties: false
      properties:
        orchestration_config:
          $ref: '#/components/schemas/OrchestrationConfig'
        input_params:
          type: object
          example:
            groundingInput: 'What is SAP Joule?'
            inputContext: 'optimizing supply chain management'
          additionalProperties:
            type: string
        messages_history:
          allOf:
            - $ref: '#/components/schemas/ChatMessages'
          description: History of chat messages. Can be used to provide system and assistant messages to set the context of the conversation. Will be merged with the template message

    # Embedings Schemas
    EmbeddingsPostRequest:
      type: object
      additionalProperties: false
      required:
        - input
        - config
      properties:
        config:
          $ref: '#/components/schemas/EmbeddingsOrchestrationConfig'
        input:
          $ref: '#/components/schemas/EmbeddingsInput'
    EmbeddingsOrchestrationConfig:
      type: object
      required:
        - modules
      additionalProperties: false
      properties:
        modules:
          $ref: '#/components/schemas/EmbeddingsModuleConfigs'
    EmbeddingsInput:
      type: object
      required:
        - text
      additionalProperties: false
      properties:
        text:
          $ref: '#/components/schemas/EmbeddingsInputText'
        type:
          type: string
          enum: ['text', 'document', 'query']
    EmbeddingsInputText:
      oneOf:
        - type: string
          description: The string that will be turned into an embedding.
          example: Hello World!
        - type: array
          description: The array of strings that will be turned into an embedding.
          minItems: 1
          items:
            type: string
            minLength: 1
          example: ['Hello', 'World', '!']
      description: Text input for which embeddings need to be generated
      example: ['This is an input string.', 'This is another input string.']
    EmbeddingsModuleConfigs:
      type: object
      required:
        - embeddings
      additionalProperties: false
      properties:
        embeddings:
          $ref: '#/components/schemas/EmbeddingsModelConfig'
        masking:
          $ref: '#/components/schemas/MaskingModuleConfig'
    EmbeddingsModelConfig:
      type: object
      required:
        - model
      additionalProperties: false
      properties:
        model:
          $ref: '#/components/schemas/EmbeddingsModelDetails'
    EmbeddingsModelDetails:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        name:
          type: string
        version:
          type: string
          default: 'latest'
        params:
          $ref: '#/components/schemas/EmbeddingsModelParams'
    EmbeddingsModelParams:
      type: object
      description: Additional parameters for generating input's embeddings. Default values are used for mandatory parameters.
      additionalProperties: true
      properties:
        dimensions:
          type: integer
          description: >
            The number of dimensions the resulting output embeddings should have.
        encoding_format:
          type: string
          enum: [float, base64, binary]
          description: >
            OpenAI's spec allows for 'float' and 'base64' encoding formats.
        normalize:
          type: boolean

    EmbeddingsPostResponse:
      type: object
      additionalProperties: false
      required:
        - request_id
      properties:
        request_id:
          type: string
        intermediate_results:
          $ref: '#/components/schemas/ModuleResultsBase'
        final_result:
          $ref: '#/components/schemas/EmbeddingsResponse'
    EmbeddingsResponse:
      type: object
      description: The response from request to embedding model following OpenAI specification.
      additionalProperties: false
      required:
        - object
        - data
        - model
        - usage
      properties:
        object:
          type: string
          description: The object type, which is always "list".
          enum:
            - list
        data:
          type: array
          description: The list of embeddings generated by the model.
          items:
            $ref: '#/components/schemas/EmbeddingResult'
        model:
          type: string
          description: The name of the model used to generate the embedding.
        usage:
          $ref: '#/components/schemas/EmbeddingsUsage'
    EmbeddingsUsage:
      type: object
      description: The usage information for the request.
      additionalProperties: false
      required:
        - prompt_tokens
        - total_tokens
      properties:
        prompt_tokens:
          type: integer
          description: The number of tokens used by the prompt.
        total_tokens:
          type: integer
          description: The total number of tokens used by the request.
    EmbeddingResult:
      type: object
      description: |
        Represents an embedding vector returned by embedding endpoint.
      additionalProperties: false
      required:
        - object
        - embedding
        - index
      properties:
        object:
          type: string
          description: The object type, which is always "embedding".
          enum:
            - embedding
        embedding:
          $ref: '#/components/schemas/Embedding'
        index:
          type: integer
          description: The index of the embedding in the list of embeddings.
    Embedding:
      oneOf:
        - type: array
          items:
            type: number
          description: 'An array of numbers representing the embedding.'
        - type: string
          description: 'A single base64 string representing the embedding.'

    # Chat Completion Schemas
    ChatMessages:
      type: array
      items:
        $ref: '#/components/schemas/ChatMessage'
    TemplatingChatMessage:
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/ChatMessage'
    ChatMessage:
      oneOf:
        - $ref: '#/components/schemas/SystemChatMessage'
        - $ref: '#/components/schemas/UserChatMessage'
        - $ref: '#/components/schemas/AssistantChatMessage'
        - $ref: '#/components/schemas/ToolChatMessage'
        - $ref: '#/components/schemas/DeveloperChatMessage'
    SystemChatMessage:
      type: object
      additionalProperties: false
      properties:
        role:
          type: string
          enum:
            - system
        content:
          $ref: '#/components/schemas/ChatMessageContent'
      required:
        - role
        - content
    ChatMessageContent:
      oneOf:
        - type: string
        - type: array
          items:
            $ref: '#/components/schemas/TextContent'
          minItems: 1
    AssistantChatMessage:
      type: object
      additionalProperties: false
      properties:
        role:
          type: string
          enum:
            - assistant
        content:
          $ref: '#/components/schemas/ChatMessageContent'
        refusal:
          type: string
        tool_calls:
          $ref: '#/components/schemas/MessageToolCalls'
      required:
        - role
    UserChatMessage:
      type: object
      additionalProperties: false
      properties:
        content:
          $ref: '#/components/schemas/UserChatMessageContent'
        role:
          type: string
          enum:
            - user
      required:
        - content
        - role
    UserChatMessageContent:
      oneOf:
        - type: string
        - type: array
          items:
            $ref: '#/components/schemas/UserChatMessageContentItem'
          minItems: 1
    UserChatMessageContentItem:
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
            - text
            - image_url
        text:
          type: string
        image_url:
          $ref: '#/components/schemas/ImageContentUrl'
      required:
        - type
    ImageContentUrl:
      type: object
      required:
        - url
      additionalProperties: false
      properties:
        url:
          type: string
        detail: # keep? openai specific
          type: string
          default: 'auto'
    ToolChatMessage:
      type: object
      additionalProperties: false
      properties:
        role:
          type: string
          enum:
            - tool
          example: tool
        tool_call_id:
          type: string
        content:
          $ref: '#/components/schemas/ChatMessageContent'
      required:
        - role
        - content
        - tool_call_id
    DeveloperChatMessage:
      type: object
      additionalProperties: false
      properties:
        role:
          type: string
          enum:
            - developer
        content:
          $ref: '#/components/schemas/ChatMessageContent'
      required:
        - role
        - content
    # Below, OpenAI's spec marks 'content' as required but nullable: https://github.com/Azure/azure-rest-api-specs/blob/8279d4aee23a3fef5aac9c76333b0895c83e44c3/specification/cognitiveservices/data-plane/AzureOpenAI/inference/stable/2024-10-21/inference.yaml#L2121
    # We've made it optional instead to maintain SDK compatibility and avoid breaking changes.
    # Functionally achieves the same result as both patterns permit responses without textual content
    # OpenAI via null values, ours via field omission.
    ResponseChatMessage:
      type: object
      additionalProperties: false
      properties:
        role:
          type: string
          enum:
            - assistant
        content:
          type: string
        refusal:
          type: string
        tool_calls:
          $ref: '#/components/schemas/MessageToolCalls'
      required:
        - role
    # below tool message definitions are copied from openai spec: https://github.com/openai/openai-openapi/blob/e0cb2d721753e13e69e918465795d6e9f87ab15a/openapi.yaml#L11007
    # only renaming them to differentiate them from the openai python classes
    MessageToolCalls:
      type: array
      description: The tool calls generated by the model, such as function calls.
      items:
        $ref: '#/components/schemas/MessageToolCall'
    MessageToolCall:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          type: object
          description: The function that the model called.
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description:
                The arguments to call the function with, as generated by the model
                in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your
                function schema. Validate the arguments in your code before
                calling your function.
          required:
            - name
            - arguments
      required:
        - id
        - type
        - function
    TextContent:
      type: object
      required:
        - type
        - text
      additionalProperties: false
      properties:
        type:
          type: string
          enum: ['text']
        text:
          type: string
    ChatDelta:
      type: object
      required:
        - content
      properties:
        role:
          type: string
        content:
          type: string
          default: ''
        refusal:
          type: string
          description: The refusal message generated by the model.
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/ToolCallChunk'
    # taken from: https://github.com/openai/openai-openapi/blob/e0cb2d721753e13e69e918465795d6e9f87ab15a/openapi.yaml#L10979C27-L10979C40
    ToolCallChunk:
      type: object
      properties:
        index:
          type: integer
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description:
                The arguments to call the function with, as generated by the model
                in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your
                function schema. Validate the arguments in your code before
                calling your function.
      required:
        - index
    CompletionPostResponse:
      type: object
      required:
        - request_id
        - orchestration_result
        - module_results
      properties:
        request_id:
          description: ID of the request
          type: string
          example: 'd4a67ea1-2bf9-4df7-8105-d48203ccff76'
        module_results:
          $ref: '#/components/schemas/ModuleResults'
        orchestration_result:
          $ref: '#/components/schemas/LLMModuleResult'

    CompletionPostResponseStreaming:
      type: object
      required:
        - request_id
      properties:
        request_id:
          description: ID of the request
          type: string
        module_results:
          $ref: '#/components/schemas/ModuleResultsStreaming'
        orchestration_result:
          $ref: '#/components/schemas/LLMModuleResultStreaming'
    OrchestrationConfig:
      type: object
      required:
        - module_configurations
      additionalProperties: false
      properties:
        module_configurations:
          $ref: '#/components/schemas/ModuleConfigs'
        stream:
          type: boolean
          description: If true, the response will be streamed back to the client
          default: false
        stream_options:
          $ref: '#/components/schemas/GlobalStreamOptions'
    ModuleConfigs:
      type: object
      required:
        - llm_module_config
        - templating_module_config
      additionalProperties: false
      properties:
        llm_module_config:
          $ref: '#/components/schemas/LLMModuleConfig'
        templating_module_config:
          $ref: '#/components/schemas/TemplatingModuleConfig'
        filtering_module_config:
          $ref: '#/components/schemas/FilteringModuleConfig'
        masking_module_config:
          $ref: '#/components/schemas/MaskingModuleConfig'
        grounding_module_config:
          $ref: '#/components/schemas/GroundingModuleConfig'
        input_translation_module_config:
          $ref: '#/components/schemas/InputTranslationModuleConfig'
        output_translation_module_config:
          $ref: '#/components/schemas/OutputTranslationModuleConfig'
    # Abstract base class encompassing fields for both `ModuleResults` and `ModuleResultsStreaming`
    # Not to be instantiated by llm-orchestration code
    ModuleResultsBase:
      description: Results of each module of /embeddings endpoint(e.g. input masking).
      type: object
      additionalProperties: false
      properties:
        grounding:
          $ref: '#/components/schemas/GenericModuleResult'
        templating:
          $ref: '#/components/schemas/TemplatingChatMessage'
        input_translation:
          $ref: '#/components/schemas/GenericModuleResult'
        input_masking:
          $ref: '#/components/schemas/GenericModuleResult'
        input_filtering:
          $ref: '#/components/schemas/GenericModuleResult'
        output_filtering:
          $ref: '#/components/schemas/GenericModuleResult'
        output_translation:
          $ref: '#/components/schemas/GenericModuleResult'
    ModuleResults:
      description: Synchronous results of each module.
      type: object
      additionalProperties: false
      allOf:
        - $ref: '#/components/schemas/ModuleResultsBase'
        - type: object
          properties:
            llm:
              $ref: '#/components/schemas/LLMModuleResult'
            output_unmasking:
              type: array
              items:
                $ref: '#/components/schemas/LLMChoice'
    ModuleResultsStreaming:
      description: Streaming results of each module.
      type: object
      additionalProperties: false
      allOf:
        - $ref: '#/components/schemas/ModuleResultsBase'
        - type: object
          properties:
            llm:
              $ref: '#/components/schemas/LLMModuleResultStreaming'
            output_unmasking:
              type: array
              items:
                $ref: '#/components/schemas/LLMChoiceStreaming'
    GlobalStreamOptions:
      description: Options for streaming. Will be ignored if stream is false.
      type: object
      additionalProperties: false
      properties:
        chunk_size:
          type: integer
          description: Minimum number of characters per chunk that post-LLM modules operate on.
          default: 100
          minimum: 1
          maximum: 10000 # currently determined by max_size of ACS text records
        delimiters:
          type: array
          minItems: 1
          description: List of delimiters to split the input text into chunks.Please note, this is a required parameter when `input_translation_module_config` or `output_translation_module_config` are configured.
          items:
            type: string
          example: ["\n", '.', '?', '!']

    # --- LLM MODULE ---
    LLMModuleConfig:
      type: object
      required:
        - model_name
      additionalProperties: false
      properties:
        model_name:
          description: Model name as in LLM Access configuration
          example: 'gpt-4o-mini'
          type: string
        model_params: # optional, default values are used for mandatory model parameters
          description: Model parameters
          type: object
          example:
            max_tokens: 300
            temperature: 0.1
            frequency_penalty: 0
            presence_penalty: 0
            n: 2
            logprobs: true
            stream_options:
              include_usage: true
          additionalProperties: true
        model_version:
          description: Version of the model to use
          type: string
          default: 'latest'
    GenericModuleResult:
      type: object
      description: Generic module result
      required:
        - message
      properties:
        message:
          type: string
          description: Some message created from the module
          example: Input to LLM is masked successfully.
        data:
          type: object
          description: Additional data object from the module
    LLMModuleResult:
      type: object
      description: Output of LLM module. Follows the OpenAI spec.
      required:
        - id
        - object
        - created
        - model
        - choices
        - usage
      properties:
        id:
          type: string
          description: ID of the response
          example: 'chatcmpl-9rO0aLoPKY7RtqkWi1317bazHEVFr'
        object:
          type: string
          description: Object type
          example: chat.completion
        created:
          type: integer
          description: Unix timestamp
          example: 1722510700
        model:
          type: string
          description: Model name
          example: 'gpt-4o-mini'
        system_fingerprint:
          type: string
          description: System fingerprint
          example: 'fp_44709d6fcb'
        choices:
          type: array
          description: Choices
          items:
            $ref: '#/components/schemas/LLMChoice'
        usage:
          $ref: '#/components/schemas/TokenUsage'
    LLMModuleResultStreaming:
      type: object
      description: Output of LLM module. Follows the OpenAI spec.
      required:
        - id
        - object
        - created
        - model
        - choices
      properties:
        id:
          type: string
          description: ID of the response
        object:
          type: string
          description: Object type
        created:
          type: integer
          description: Unix timestamp
        model:
          type: string
          description: Model name
        system_fingerprint:
          type: string
          description: System fingerprint
        choices:
          type: array
          description: Choices
          items:
            $ref: '#/components/schemas/LLMChoiceStreaming'
        usage:
          $ref: '#/components/schemas/TokenUsage'
    LLMChoice:
      type: object
      required:
        - index
        - message
        - finish_reason
      properties:
        index:
          type: integer
          description: Index of the choice
          example: 0
        message:
          $ref: '#/components/schemas/ResponseChatMessage'
        logprobs:
          $ref: '#/components/schemas/ChoiceLogprobs'
        finish_reason:
          type: string
          description: "Reason the model stopped generating tokens. 'stop' if the model hit a natural stop point or a provided stop sequence, 'length' if the maximum token number was reached, 'content_filter' if content was omitted due to a filter enforced by the LLM model provider or the content filtering module"
          example: stop
    LLMChoiceStreaming:
      type: object
      required:
        - index
        - delta
      properties:
        index:
          type: integer
          description: Index of the choice
        delta:
          $ref: '#/components/schemas/ChatDelta'
        logprobs:
          $ref: '#/components/schemas/ChoiceLogprobs'
        finish_reason:
          type: string
          description: Reason for stopping the model
    TokenUsage:
      type: object
      description: Usage of tokens in the response
      required:
        - completion_tokens
        - prompt_tokens
        - total_tokens
      properties:
        completion_tokens:
          type: integer
          description: Number of tokens used in the input
          example: 20
        prompt_tokens:
          type: integer
          description: Number of tokens used in the output
          example: 30
        total_tokens:
          type: integer
          description: Total number of tokens used
          example: 50

    # --- Templating Module ---

    TemplatingModuleConfig:
      oneOf:
        - $ref: '#/components/schemas/Template'
        - $ref: '#/components/schemas/TemplateRef'

    # --- Templating Module with User Defined Template ---
    # response_format api definition taken from: https://github.com/openai/openai-openapi/blob/e0cb2d721753e13e69e918465795d6e9f87ab15a/openapi.yaml#L12286
    # tools api definition taken from: https://github.com/openai/openai-openapi/blob/e0cb2d721753e13e69e918465795d6e9f87ab15a/openapi.yaml#L12406
    Template:
      type: object
      required:
        - template
      additionalProperties: false
      properties:
        template:
          allOf:
            - $ref: '#/components/schemas/TemplatingChatMessage'
          description: A chat message array to be formatted with values from input_params. Both role and content can be templated. If messages_history is provided, the templated messages will be appended.
        defaults:
          description: Optional default values for the template. If a parameter has no default it is required.
          type: object
          additionalProperties:
            type: string
        response_format:
          description: >
            Response format that the model output should adhere to.
            This is the same as the OpenAI definition.
          oneOf:
            - $ref: '#/components/schemas/ResponseFormatText'
            - $ref: '#/components/schemas/ResponseFormatJsonObject'
            - $ref: '#/components/schemas/ResponseFormatJsonSchema'
        tools:
          type: array
          description: >
            A list of tools the model may call. Used to provide a list of functions the model may generate JSON inputs for.
            This is the same as the OpenAI definition.
          items:
            $ref: '#/components/schemas/ChatCompletionTool'
      example:
        template:
          - role: user
            content: 'How can the features of AI in SAP BTP specifically {{?groundingOutput}}, be applied to {{?inputContext}}'
        defaults:
          inputContext: The default text that will be used in the template if inputContext is not set

    # below ReponseFormats are copied from openapi spec: https://github.com/openai/openai-openapi/blob/e0cb2d721753e13e69e918465795d6e9f87ab15a/openapi.yaml#L12286
    ResponseFormatText:
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          description: 'The type of response format being defined: `text`'
          enum:
            - text
      required:
        - type
    ResponseFormatJsonObject:
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          description: 'The type of response format being defined: `json_object`'
          enum:
            - json_object
      required:
        - type
    ResponseFormatJsonSchema:
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          description: 'The type of response format being defined: `json_schema`'
          enum:
            - json_schema
        json_schema:
          type: object
          additionalProperties: false
          properties:
            description:
              type: string
              description:
                A description of what the response format is for, used by the model
                to determine how to respond in the format.
            name:
              type: string
              description:
                The name of the response format. Must be a-z, A-Z, 0-9, or contain
                underscores and dashes, with a maximum length of 64.
              pattern: '^[a-zA-Z0-9-_]+$'
              maxLength: 64
            schema:
              $ref: '#/components/schemas/ResponseFormatJsonSchemaSchema'
            strict:
              type: boolean
              nullable: true
              default: false
              description:
                Whether to enable strict schema adherence when generating the
                output. If set to true, the model will always follow the exact
                schema defined in the `schema` field. Only a subset of JSON
                Schema is supported when `strict` is `true`. To learn more, read
                the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
          required:
            - name
      required:
        - type
        - json_schema
    ResponseFormatJsonSchemaSchema:
      type: object
      description: The schema for the response format, described as a JSON Schema object.
      additionalProperties: true

    # below tool-related definitions are copied from openai spec: https://github.com/openai/openai-openapi/blob/e0cb2d721753e13e69e918465795d6e9f87ab15a/openapi.yaml#L11547
    ChatCompletionTool:
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          $ref: '#/components/schemas/FunctionObject'
      required:
        - type
        - function
    FunctionObject:
      type: object
      additionalProperties: false
      properties:
        description:
          type: string
          description:
            A description of what the function does, used by the model to
            choose when and how to call the function.
        name:
          type: string
          description:
            The name of the function to be called. Must be a-z, A-Z, 0-9, or
            contain underscores and dashes, with a maximum length of 64.
          pattern: '^[a-zA-Z0-9-_]+$'
          maxLength: 64
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
        strict:
          type: boolean
          nullable: true
          default: false
          description:
            Whether to enable strict schema adherence when generating the
            function call. If set to true, the model will follow the exact
            schema defined in the `parameters` field. Only a subset of JSON
            Schema is supported when `strict` is `true`. Learn more about
            Structured Outputs in the [function calling
            guide](docs/guides/function-calling).
      required:
        - name
    FunctionParameters:
      type: object
      description: >-
        The parameters the functions accepts, described as a JSON Schema object.
        See the [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the
        [JSON Schema
        reference](https://json-schema.org/understanding-json-schema/) for
        documentation about the format. 
        Omitting `parameters` defines a function with an empty parameter list.
      additionalProperties: true

    # --- Templating Module with reference to Prompt Registry ---
    TemplateRef:
      type: object
      required:
        - template_ref
      additionalProperties: false
      properties:
        template_ref:
          description: Reference to a template in the prompt registry by ID or by scenario, name and version
          oneOf:
            - $ref: '#/components/schemas/TemplateRefByID'
            - $ref: '#/components/schemas/TemplateRefByScenarioNameVersion'

    TemplateRefByID:
      type: object
      required:
        - id
      additionalProperties: false
      properties:
        id:
          type: string
          description: ID of the template in prompt registry
          example: 'template_id'

    TemplateRefByScenarioNameVersion:
      type: object
      required:
        - scenario
        - name
        - version
      additionalProperties: false
      properties:
        scenario:
          type: string
          description: Scenario name
          example: 'some-scenario'
        name:
          type: string
          description: Name of the template
          example: 'some-template-name'
        version:
          type: string
          description: Version of the template
          example: 'some version, can be `latest`'

    # --- Filtering Module ---
    FilteringModuleConfig:
      type: object
      additionalProperties: false
      properties:
        input:
          allOf:
            - $ref: '#/components/schemas/InputFilteringConfig'
          description: List of provider type and filters
        output:
          allOf:
            - $ref: '#/components/schemas/OutputFilteringConfig'
          description: List of provider type and filters
      minProperties: 1

    InputFilteringConfig:
      type: object
      required:
        - filters
      additionalProperties: false
      properties:
        filters:
          description: Configuration for content filtering services that should be used for the given filtering step (input filtering).
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/InputFilterConfig'

    OutputFilteringConfig:
      type: object
      required:
        - filters
      additionalProperties: false
      properties:
        filters:
          description: Configuration for content filtering services that should be used for the given filtering step (output filtering).
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/OutputFilterConfig'
        stream_options:
          $ref: '#/components/schemas/FilteringStreamOptions'

    FilteringStreamOptions:
      description: Stream options for output filtering. Will be ignored if stream is false.
      type: object
      additionalProperties: false
      properties:
        overlap:
          type: integer
          description: Number of characters that should be additionally sent to content filtering services from previous chunks as additional context.
          default: 0
          minimum: 0
          maximum: 10000

    InputFilterConfig:
      oneOf:
        - $ref: '#/components/schemas/AzureContentSafetyInputFilterConfig'
        - $ref: '#/components/schemas/LlamaGuard38bFilterConfig'

    OutputFilterConfig:
      oneOf:
        - $ref: '#/components/schemas/AzureContentSafetyOutputFilterConfig'
        - $ref: '#/components/schemas/LlamaGuard38bFilterConfig'

    AzureContentSafetyInputFilterConfig:
      type: object
      required:
        - type
      additionalProperties: false
      properties:
        type:
          description: Name of the filter provider type
          type: string
          enum:
            - azure_content_safety
          example: azure_content_safety
        config:
          $ref: '#/components/schemas/AzureContentSafetyInput'

    AzureContentSafetyOutputFilterConfig:
      type: object
      required:
        - type
      additionalProperties: false
      properties:
        type:
          description: Name of the filter provider type
          type: string
          enum:
            - azure_content_safety
          example: azure_content_safety
        config:
          $ref: '#/components/schemas/AzureContentSafetyOutput'

    AzureContentSafetyInput:
      description: Filter configuration for Azure Content Safety
      type: object
      additionalProperties: false
      properties:
        Hate:
          $ref: '#/components/schemas/AzureThreshold'
        SelfHarm:
          $ref: '#/components/schemas/AzureThreshold'
        Sexual:
          $ref: '#/components/schemas/AzureThreshold'
        Violence:
          $ref: '#/components/schemas/AzureThreshold'
        PromptShield:
          type: boolean
          description: A flag to use prompt shield
          default: false

    AzureContentSafetyOutput:
      description: Filter configuration for Azure Content Safety
      type: object
      additionalProperties: false
      properties:
        Hate:
          $ref: '#/components/schemas/AzureThreshold'
        SelfHarm:
          $ref: '#/components/schemas/AzureThreshold'
        Sexual:
          $ref: '#/components/schemas/AzureThreshold'
        Violence:
          $ref: '#/components/schemas/AzureThreshold'

    AzureThreshold:
      type: integer
      enum:
        - 0
        - 2
        - 4
        - 6
      example: 0

    LlamaGuard38bFilterConfig:
      type: object
      required:
        - type
        - config
      additionalProperties: false
      properties:
        type:
          description: Name of the filter provider type
          type: string
          enum:
            - llama_guard_3_8b
          example: llama_guard_3_8b
        config:
          $ref: '#/components/schemas/LlamaGuard38b'

    LlamaGuard38b:
      description: Filter configuration for Llama Guard 3 8B
      type: object
      additionalProperties: false
      minProperties: 1
      properties:
        violent_crimes:
          type: boolean
        non_violent_crimes:
          type: boolean
        sex_crimes:
          type: boolean
        child_exploitation:
          type: boolean
        defamation:
          type: boolean
        specialized_advice:
          type: boolean
        privacy:
          type: boolean
        intellectual_property:
          type: boolean
        indiscriminate_weapons:
          type: boolean
        hate:
          type: boolean
        self_harm:
          type: boolean
        sexual_content:
          type: boolean
        elections:
          type: boolean
        code_interpreter_abuse:
          type: boolean

    # --- Masking module ---

    MaskingModuleConfig:
      type: object
      required:
        - masking_providers
      additionalProperties: false
      properties:
        masking_providers:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/MaskingProviderConfig'
          description: List of masking service providers

    MaskingProviderConfig:
      oneOf:
        - $ref: '#/components/schemas/DPIConfig'

    DPIConfig:
      type: object
      required:
        - type
        - method
        - entities
      additionalProperties: false
      properties:
        type:
          description: Type of masking service provider
          type: string
          enum:
            - sap_data_privacy_integration
        method:
          description: Type of masking method to be used
          type: string
          enum:
            - anonymization
            - pseudonymization
        entities:
          description: List of entities to be masked
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/DPIEntityConfig'
        allowlist:
          description: List of strings that should not be masked
          type: array
          example: ['SAP', 'Joule']
          items:
            type: string
        mask_grounding_input:
          type: object
          additionalProperties: false
          properties:
            enabled:
              type: boolean
              default: false
              description: controls whether the input to the grounding module will be masked with the configuration supplied in the masking module

    DPIEntityConfig:
      oneOf:
        - $ref: '#/components/schemas/DPIStandardEntity'
        - $ref: '#/components/schemas/DPICustomEntity'

    DPICustomEntity:
      type: object
      required:
        - regex
        - replacement_strategy
      additionalProperties: false
      properties:
        regex:
          description: Regular expression to match the entity
          type: string
        replacement_strategy:
          description: Replacement strategy to be used for the entity
          oneOf:
            - $ref: '#/components/schemas/DPIMethodConstant'

    DPIStandardEntity:
      type: object
      required:
        - type
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/DPIEntities'
        replacement_strategy:
          description: Replacement strategy to be used for the entity
          oneOf:
            - $ref: '#/components/schemas/DPIMethodConstant'
            - $ref: '#/components/schemas/DPIMethodFabricatedData'

    DPIMethodConstant:
      description: Replaces the entity with the specified value followed by an incrementing number
      type: object
      required:
        - method
        - value
      additionalProperties: false
      properties:
        method:
          type: string
          enum:
            - constant
        value:
          description: Value to be used for replacement
          example: NAME_REDACTED
          type: string

    DPIMethodFabricatedData:
      description: Replaces the entity with a randomly generated value appropriate to its type.
      type: object
      required:
        - method
      additionalProperties: false
      properties:
        method:
          type: string
          enum:
            - fabricated_data

    DPIEntities:
      description: Default entities supported by data privacy and integration service
      type: string
      enum:
        - profile-person
        - profile-org
        - profile-university
        - profile-location
        - profile-email
        - profile-phone
        - profile-address
        - profile-sapids-internal
        - profile-sapids-public
        - profile-url
        - profile-username-password
        - profile-nationalid
        - profile-iban
        - profile-ssn
        - profile-credit-card-number
        - profile-passport
        - profile-driverlicense
        - profile-nationality
        - profile-religious-group
        - profile-political-group
        - profile-pronouns-gender
        - profile-ethnicity
        - profile-gender
        - profile-sexual-orientation
        - profile-trade-union
        - profile-sensitive-data

    # --- Grounding Module ---
    GroundingModuleConfig:
      type: object
      required:
        - type
        - config
      additionalProperties: false
      properties:
        type:
          type: string
          anyOf:
            - enum:
                - document_grounding_service
            - {}
          example: document_grounding_service
        config:
          type: object
          required:
            - input_params
            - output_param
          additionalProperties: false
          properties:
            filters:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/DocumentGroundingFilter'
              description: Document grounding service filters to be used
            input_params:
              type: array
              minItems: 1
              items:
                type: string
                example: groundingInput
              description: Contains the input parameters used for grounding input questions
            output_param:
              type: string
              description: Parameter name used for grounding output
              example: groundingOutput
            metadata_params:
              type: array
              items:
                type: string
              description: Parameter name used for specifying metadata parameters

    DocumentGroundingFilter:
      type: object
      required:
        - data_repository_type
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/GroundingFilterId'
        search_config:
          $ref: '#/components/schemas/GroundingFilterSearchConfiguration'
        data_repositories:
          type: array
          items:
            type: string
          title: DataRepositories
          description: Specify ['*'] to search across all DataRepositories or give a specific list of DataRepository ids.
          default:
            - '*'
        data_repository_type:
          $ref: '#/components/schemas/DataRepositoryType'
        data_repository_metadata:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueListPair'
          title: Datarepositorymetadata
          description: Restrict DataRepositories considered during search to those annotated with the given metadata. Useful when combined with dataRepositories=['*']
        document_metadata:
          type: array
          items:
            $ref: '#/components/schemas/SearchDocumentKeyValueListPair'
          title: Documentmetadata
          description: Restrict documents considered during search to those annotated with the given metadata.
        chunk_metadata:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueListPair'
          title: Chunkmetadata
          description: Restrict chunks considered during search to those with the given metadata.
      minProperties: 1

    GroundingFilterId:
      title: Id
      description: Identifier of this SearchFilter - unique per request.
      type: string
    GroundingFilterSearchConfiguration:
      additionalProperties: false
      properties:
        max_chunk_count:
          type: integer
          minimum: 0
          exclusiveMinimum: true
          title: Maxchunkcount
          description: Maximum number of chunks to be returned. Cannot be used with 'maxDocumentCount'.
        max_document_count:
          type: integer
          minimum: 0
          exclusiveMinimum: true
          title: Maxdocumentcount
          description: "[Only supports 'vector' dataRepositoryType] - Maximum number of documents to be returned. Cannot be used with 'maxChunkCount'. If maxDocumentCount is given, then only one chunk per document is returned."
      title: SearchConfiguration
      minProperties: 0
      maxProperties: 1

    DataRepositoryType:
      type: string
      description: Only include DataRepositories with the given type.
      enum:
        - vector
        - help.sap.com
      title: DataRepositoryType

    KeyValueListPair:
      additionalProperties: false
      properties:
        key:
          type: string
          maxLength: 1024
          title: Key
        value:
          type: array
          items:
            type: string
            maxLength: 1024
          title: Value
      type: object
      required:
        - key
        - value
      title: KeyValueListPair

    SearchDocumentKeyValueListPair:
      additionalProperties: false
      properties:
        key:
          type: string
          maxLength: 1024
          title: Key
        value:
          type: array
          items:
            type: string
            maxLength: 1024
          title: Value
        select_mode:
          type: array
          items:
            $ref: '#/components/schemas/SearchSelectOptionEnum'
          title: Selectmode
          description: Select mode for search filters
      type: object
      required:
        - key
        - value
      title: SearchDocumentKeyValueListPair
    SearchSelectOptionEnum:
      type: string
      enum:
        - ignoreIfKeyAbsent
      title: SearchSelectOptionEnum

    # --- Translation Module ---
    InputTranslationModuleConfig:
      oneOf:
        - $ref: '#/components/schemas/SAPDocumentTranslation'
    OutputTranslationModuleConfig:
      oneOf:
        - $ref: '#/components/schemas/SAPDocumentTranslation'
    SAPDocumentTranslation:
      type: object
      required:
        - type
        - config
      additionalProperties: false
      properties:
        type:
          description: Type of document translation provider
          type: string
          enum:
            - sap_document_translation # this would be different for other translation provider
          example: sap_document_translation
        config: # `config` key, parameters specific to SAP Translation Hub that are sent to the service, might differ for translation provider
          description: Configuration for `sap_document_translation` translation provider.
          type: object
          required:
            - target_language
          additionalProperties: false
          properties:
            source_language:
              type: string
              description: Language of the text to be translated.
              example: 'de-DE'
            target_language:
              type: string
              description: Language to which the text should be translated.
              example: 'en-US'

    ErrorResponse:
      type: object
      required:
        - request_id
        - code
        - message
        - location
      properties:
        request_id:
          type: string
          example: 'd4a67ea1-2bf9-4df7-8105-d48203ccff76'
        code:
          type: integer
          example: 400
        message:
          type: string
          example: "Model name must be one of ['gpt-4o-mini', ...]"
        location:
          type: string
          description: Where the error occurred
          example: 'LLM Module'
        module_results:
          $ref: '#/components/schemas/ModuleResults'

    ErrorResponseStreaming:
      type: object
      required:
        - request_id
        - code
        - message
        - location
      properties:
        request_id:
          type: string
          example: 'd4a67ea1-2bf9-4df7-8105-d48203ccff76'
        code:
          type: integer
          example: 500
        message:
          type: string
          example: "Model name must be one of ['gpt-4o-mini', ...]"
        location:
          type: string
          description: Where the error occurred
          example: 'LLM Module'
        module_results:
          $ref: '#/components/schemas/ModuleResultsStreaming'

    # ref : https://github.com/openai/openai-python/blob/main/src/openai/types/chat/chat_completion_token_logprob.py
    ChatCompletionTokenLogprob:
      type: object
      required:
        - token
        - logprob
      properties:
        token:
          type: string
          description: The token.
        logprob:
          type: number
          format: float
          description: The log probability of this token.
        bytes:
          type: array
          items:
            type: integer
            format: int32
          description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are multi-byte.
        top_logprobs:
          type: array
          description: List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs`.
          items:
            # This is the schema for the inner object within top_logprobs
            type: object
            required:
              - token
              - logprob
            properties:
              token:
                type: string
                description: The token.
              logprob:
                type: number
                format: float
                description: The log probability of this token.
              bytes:
                type: array
                items:
                  type: integer
                  format: int32
                description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are multi-byte.
    # ref : https://github.com/openai/openai-python/blob/main/src/openai/types/chat/chat_completion.py
    ChoiceLogprobs:
      type: object
      description: Log probabilities for the choice.
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionTokenLogprob'
          description: A list of message content tokens with log probability information.
        refusal:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionTokenLogprob'
          description: A list of message refusal tokens with log probability information.

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    CommonError:
      description: Common Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  # https://pages.github.tools.sap/CPA/api-metadata-validator/rules/oas/sap-oas3-security/
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: To use this API, you must have an AI Core access token.
