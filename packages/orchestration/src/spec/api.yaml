openapi: 3.0.0

info:
  title: Internal Orchestration Service API
  description: SAP AI Core - Orchestration Service API
  contact:
    name: SAP AI Core
  version: 0.0.1

servers:
  - url: '/v1'

tags:
  - name: OrchestrationCompletion
    description: Run an orchestrated completion inference request

paths:
  /completion:
    post:
      tags:
        - OrchestrationCompletion
      description: Run an orchestrated completion inference request
      operationId: orchestration.v1.endpoints.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionPostRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionPostResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/CommonError'

components:
  schemas:
    CompletionPostRequest:
      type: object
      required:
        - orchestration_config
      additionalProperties: false
      properties:
        orchestration_config:
          $ref: '#/components/schemas/OrchestrationConfig'
        input_params:
          type: object
          example:
            groundingInput: 'What is SAP Joule?'
            inputContext: 'optimizing supply chain management'
          additionalProperties:
            type: string
        messages_history:
          allOf:
            - $ref: '#/components/schemas/ChatMessages'
          description: History of chat messages. Can be used to provide system and assistant messages to set the context of the conversation. Will be merged with the template message

    ChatMessage:
      oneOf:
        - $ref: '#/components/schemas/SingleChatMessage'
        - $ref: '#/components/schemas/MultiChatMessage'

    ChatMessages:
      type: array
      items:
        $ref: '#/components/schemas/ChatMessage'

    TemplatingChatMessage:
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/ChatMessage'

    SingleChatMessage:
      type: object
      required:
        - role
        - content
      additionalProperties: false
      properties:
        role:
          type: string
          example: user
        content:
          type: string

    ResponseChatMessage:
      allOf:
        - $ref: '#/components/schemas/SingleChatMessage'
        - type: object
          additionalProperties: false
          properties:
            refusal:
              type: string
              example: "I'm sorry, I can't answer that question."
            tool_calls:
              $ref: '#/components/schemas/ResponseMessageToolCalls'
    # below tool message definitions are copied from openai spec: https://github.com/openai/openai-openapi/blob/e0cb2d721753e13e69e918465795d6e9f87ab15a/openapi.yaml#L11007
    # only renaming them to differentiate them from the openai python classes
    ResponseMessageToolCalls:
      type: array
      description: The tool calls generated by the model, such as function calls.
      items:
        $ref: '#/components/schemas/ResponseMessageToolCall'
    ResponseMessageToolCall:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          type: object
          description: The function that the model called.
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description:
                The arguments to call the function with, as generated by the model
                in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your
                function schema. Validate the arguments in your code before
                calling your function.
          required:
            - name
            - arguments
      required:
        - id
        - type
        - function

    MultiChatMessage:
      type: object
      required:
        - role
        - content
      additionalProperties: false
      properties:
        role:
          type: string
          example: user
        content:
          type: array
          items:
            $ref: '#/components/schemas/MultiChatMessageContent'

    MultiChatMessageContent:
      oneOf:
        - $ref: '#/components/schemas/TextContent'
        - $ref: '#/components/schemas/ImageContent'

    TextContent:
      type: object
      required:
        - type
        - text
      additionalProperties: false
      properties:
        type:
          type: string
          enum: ['text']
        text:
          type: string

    ImageContent:
      type: object
      required:
        - type
        - image_url
      additionalProperties: false
      properties:
        type:
          type: string
          enum: ['image_url']
        image_url:
          type: object
          required:
            - url
          additionalProperties: false
          properties:
            url:
              type: string
            detail: # keep? openai specific
              type: string
              default: 'auto'

    ChatDelta:
      type: object
      required:
        - content
      properties:
        role:
          type: string
        content:
          type: string
          default: ''
        refusal:
          type: string
          description: The refusal message generated by the model.
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/ToolCallChunk'
    # taken from: https://github.com/openai/openai-openapi/blob/e0cb2d721753e13e69e918465795d6e9f87ab15a/openapi.yaml#L10979C27-L10979C40
    ToolCallChunk:
      type: object
      properties:
        index:
          type: integer
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description:
                The arguments to call the function with, as generated by the model
                in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your
                function schema. Validate the arguments in your code before
                calling your function.
      required:
        - index

    CompletionPostResponse:
      type: object
      required:
        - request_id
        - orchestration_result
        - module_results
      properties:
        request_id:
          description: ID of the request
          type: string
          example: 'd4a67ea1-2bf9-4df7-8105-d48203ccff76'
        module_results:
          $ref: '#/components/schemas/ModuleResults'
        orchestration_result:
          $ref: '#/components/schemas/LLMModuleResult'

    CompletionPostResponseStreaming:
      type: object
      required:
        - request_id
      properties:
        request_id:
          description: ID of the request
          type: string
        module_results:
          $ref: '#/components/schemas/ModuleResults'
        orchestration_result:
          $ref: '#/components/schemas/LLMModuleResultStreaming'

    OrchestrationConfig:
      type: object
      required:
        - module_configurations
      additionalProperties: false
      properties:
        module_configurations:
          $ref: '#/components/schemas/ModuleConfigs'
        stream:
          type: boolean
          description: If true, the response will be streamed back to the client
          default: false
        stream_options:
          $ref: '#/components/schemas/GlobalStreamOptions'

    ModuleConfigs:
      type: object
      required:
        - llm_module_config
        - templating_module_config
      additionalProperties: false
      properties:
        llm_module_config:
          $ref: '#/components/schemas/LLMModuleConfig'
        templating_module_config:
          $ref: '#/components/schemas/TemplatingModuleConfig'
        filtering_module_config:
          $ref: '#/components/schemas/FilteringModuleConfig'
        masking_module_config:
          $ref: '#/components/schemas/MaskingModuleConfig'
        grounding_module_config:
          $ref: '#/components/schemas/GroundingModuleConfig'

    ModuleResults:
      description: Results of each module.
      type: object
      additionalProperties: false
      properties:
        grounding:
          $ref: '#/components/schemas/GenericModuleResult'
        templating:
          $ref: '#/components/schemas/TemplatingChatMessage'
        input_masking:
          $ref: '#/components/schemas/GenericModuleResult'
        input_filtering:
          $ref: '#/components/schemas/GenericModuleResult'
        llm:
          $ref: '#/components/schemas/LLMModuleResult'
        output_filtering:
          $ref: '#/components/schemas/GenericModuleResult'
        output_unmasking:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/LLMChoice'
              - $ref: '#/components/schemas/LLMChoiceStreaming'

    GlobalStreamOptions:
      description: Options for streaming. Will be ignored if stream is false.
      type: object
      additionalProperties: false
      properties:
        chunk_size:
          type: integer
          description: Number of characters per chunk that post-LLM modules operate on.
          default: 100
          minimum: 1
          maximum: 10000 # currently determined by max_size of ACS text records

    # --- LLM MODULE ---
    LLMModuleConfig:
      type: object
      required:
        - model_name
      additionalProperties: false
      properties:
        model_name:
          description: Model name as in LLM Access configuration
          example: 'gpt-4'
          type: string
        model_params: # optional, default values are used for mandatory model parameters
          description: Model parameters
          type: object
          example:
            max_tokens: 300
            temperature: 0.1
            frequency_penalty: 0
            presence_penalty: 0
            n: 2
          additionalProperties: true
        model_version:
          description: Version of the model to use
          type: string
          default: 'latest'

    GenericModuleResult:
      type: object
      description: Generic module result
      required:
        - message
      properties:
        message:
          type: string
          description: Some message created from the module
          example: Input to LLM is masked successfully.
        data:
          type: object
          description: Additional data object from the module

    LLMModuleResult:
      description: Output of LLM module. Follows the OpenAI spec.
      oneOf:
        - $ref: '#/components/schemas/LLMModuleResultSynchronous'
        - $ref: '#/components/schemas/LLMModuleResultStreaming'

    LLMModuleResultSynchronous:
      type: object
      description: Output of LLM module. Follows the OpenAI spec.
      required:
        - id
        - object
        - created
        - model
        - choices
        - usage
      properties:
        id:
          type: string
          description: ID of the response
          example: 'chatcmpl-9rO0aLoPKY7RtqkWi1317bazHEVFr'
        object:
          type: string
          description: Object type
          example: chat.completion
        created:
          type: integer
          description: Unix timestamp
          example: 1722510700
        model:
          type: string
          description: Model name
          example: 'gpt-4'
        system_fingerprint:
          type: string
          description: System fingerprint
          example: 'fp_44709d6fcb'
        choices:
          type: array
          description: Choices
          items:
            $ref: '#/components/schemas/LLMChoice'
        usage:
          $ref: '#/components/schemas/TokenUsage'

    LLMModuleResultStreaming:
      type: object
      description: Output of LLM module. Follows the OpenAI spec.
      required:
        - id
        - object
        - created
        - model
        - choices
      properties:
        id:
          type: string
          description: ID of the response
        object:
          type: string
          description: Object type
        created:
          type: integer
          description: Unix timestamp
        model:
          type: string
          description: Model name
        system_fingerprint:
          type: string
          description: System fingerprint
        choices:
          type: array
          description: Choices
          items:
            $ref: '#/components/schemas/LLMChoiceStreaming'
        usage:
          $ref: '#/components/schemas/TokenUsage'

    LLMChoice:
      type: object
      required:
        - index
        - message
        - finish_reason
      properties:
        index:
          type: integer
          description: Index of the choice
          example: 0
        message:
          $ref: '#/components/schemas/ResponseChatMessage'
        logprobs:
          type: object
          description: Log probabilities
          additionalProperties:
            type: array
            items:
              type: number
        finish_reason:
          type: string
          description: "Reason the model stopped generating tokens. 'stop' if the model hit a natural stop point or a provided stop sequence, 'length' if the maximum token number was reached, 'content_filter' if content was omitted due to a filter enforced by the LLM model provider or the content filtering module"
          example: stop

    LLMChoiceStreaming:
      type: object
      required:
        - index
        - delta
      properties:
        index:
          type: integer
          description: Index of the choice
        delta:
          $ref: '#/components/schemas/ChatDelta'
        logprobs:
          type: object
          description: Log probabilities
          additionalProperties:
            type: array
            items:
              type: number
        finish_reason:
          type: string
          description: Reason for stopping the model

    TokenUsage:
      type: object
      description: Usage of tokens in the response
      required:
        - completion_tokens
        - prompt_tokens
        - total_tokens
      properties:
        completion_tokens:
          type: integer
          description: Number of tokens used in the input
          example: 20
        prompt_tokens:
          type: integer
          description: Number of tokens used in the output
          example: 30
        total_tokens:
          type: integer
          description: Total number of tokens used
          example: 50

    # --- Templating Module ---

    TemplatingModuleConfig:
      oneOf:
        - $ref: '#/components/schemas/Template'
        - $ref: '#/components/schemas/TemplateRef'

    # --- Templating Module with User Defined Template ---
    # response_format api definition taken from: https://github.com/openai/openai-openapi/blob/e0cb2d721753e13e69e918465795d6e9f87ab15a/openapi.yaml#L12286
    # tools api definition taken from: https://github.com/openai/openai-openapi/blob/e0cb2d721753e13e69e918465795d6e9f87ab15a/openapi.yaml#L12406
    Template:
      type: object
      required:
        - template
      additionalProperties: false
      properties:
        template:
          allOf:
            - $ref: '#/components/schemas/TemplatingChatMessage'
          description: A chat message array to be formatted with values from input_params. Both role and content can be templated. If messages_history is provided, the templated messages will be appended.
        defaults:
          description: Optional default values for the template. If a parameter has no default it is required.
          type: object
          additionalProperties:
            type: string
        response_format:
          description: >
            Response format that the model output should adhere to.
            This is the same as the OpenAI definition.

            Compatible with GPT-4o, GPT-4o mini, GPT-4 (Turbo) and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106.
          oneOf:
            - $ref: '#/components/schemas/ResponseFormatText'
            - $ref: '#/components/schemas/ResponseFormatJsonObject'
            - $ref: '#/components/schemas/ResponseFormatJsonSchema'
        tools:
          type: array
          description: >
            A list of tools the model may call. Used to provide a list of functions the model may generate JSON inputs for.
            This is the same as the OpenAI definition.
          items:
            $ref: '#/components/schemas/ChatCompletionTool'
      example:
        template:
          - role: user
            content: 'How can the features of AI in SAP BTP specifically {{?groundingOutput}}, be applied to {{?inputContext}}'
        defaults:
          inputContext: The default text that will be used in the template if inputContext is not set

    # below ReponseFormats are copied from openapi spec: https://github.com/openai/openai-openapi/blob/e0cb2d721753e13e69e918465795d6e9f87ab15a/openapi.yaml#L12286
    ResponseFormatText:
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          description: 'The type of response format being defined: `text`'
          enum:
            - text
      required:
        - type
    ResponseFormatJsonObject:
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          description: 'The type of response format being defined: `json_object`'
          enum:
            - json_object
      required:
        - type
    ResponseFormatJsonSchema:
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          description: 'The type of response format being defined: `json_schema`'
          enum:
            - json_schema
        json_schema:
          type: object
          additionalProperties: false
          properties:
            description:
              type: string
              description:
                A description of what the response format is for, used by the model
                to determine how to respond in the format.
            name:
              type: string
              description:
                The name of the response format. Must be a-z, A-Z, 0-9, or contain
                underscores and dashes, with a maximum length of 64.
            schema:
              $ref: '#/components/schemas/ResponseFormatJsonSchemaSchema'
            strict:
              type: boolean
              nullable: true
              default: false
              description:
                Whether to enable strict schema adherence when generating the
                output. If set to true, the model will always follow the exact
                schema defined in the `schema` field. Only a subset of JSON
                Schema is supported when `strict` is `true`. To learn more, read
                the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
          required:
            - name
      required:
        - type
        - json_schema
    ResponseFormatJsonSchemaSchema:
      type: object
      description: The schema for the response format, described as a JSON Schema object.
      additionalProperties: true

    # below tool-related definitions are copied from openai spec: https://github.com/openai/openai-openapi/blob/e0cb2d721753e13e69e918465795d6e9f87ab15a/openapi.yaml#L11547
    ChatCompletionTool:
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          $ref: '#/components/schemas/FunctionObject'
      required:
        - type
        - function
    FunctionObject:
      type: object
      additionalProperties: false
      properties:
        description:
          type: string
          description:
            A description of what the function does, used by the model to
            choose when and how to call the function.
        name:
          type: string
          description:
            The name of the function to be called. Must be a-z, A-Z, 0-9, or
            contain underscores and dashes, with a maximum length of 64.
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
        strict:
          type: boolean
          nullable: true
          default: false
          description:
            Whether to enable strict schema adherence when generating the
            function call. If set to true, the model will follow the exact
            schema defined in the `parameters` field. Only a subset of JSON
            Schema is supported when `strict` is `true`. Learn more about
            Structured Outputs in the [function calling
            guide](docs/guides/function-calling).
      required:
        - name
    FunctionParameters:
      type: object
      description: >-
        The parameters the functions accepts, described as a JSON Schema object.
        See the [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the
        [JSON Schema
        reference](https://json-schema.org/understanding-json-schema/) for
        documentation about the format. 
        Omitting `parameters` defines a function with an empty parameter list.
      additionalProperties: true

    # --- Templating Module with reference to Prompt Registry ---
    TemplateRef:
      type: object
      required:
        - template_ref
      additionalProperties: false
      properties:
        template_ref:
          description: Reference to a template in the prompt registry by ID or by scenario, name and version
          oneOf:
            - $ref: '#/components/schemas/TemplateRefByID'
            - $ref: '#/components/schemas/TemplateRefByScenarioNameVersion'

    TemplateRefByID:
      type: object
      required:
        - id
      additionalProperties: false
      properties:
        id:
          type: string
          description: ID of the template in prompt registry
          example: 'template_id'

    TemplateRefByScenarioNameVersion:
      type: object
      required:
        - scenario
        - name
        - version
      additionalProperties: false
      properties:
        scenario:
          type: string
          description: Scenario name
          example: 'some-scenario'
        name:
          type: string
          description: Name of the template
          example: 'some-template-name'
        version:
          type: string
          description: Version of the template
          example: 'some version, can be `latest`'

    # --- Filtering Module ---
    FilteringModuleConfig:
      type: object
      additionalProperties: false
      properties:
        input:
          allOf:
            - $ref: '#/components/schemas/InputFilteringConfig'
          description: List of provider type and filters
        output:
          allOf:
            - $ref: '#/components/schemas/OutputFilteringConfig'
          description: List of provider type and filters
      minProperties: 1

    InputFilteringConfig:
      type: object
      required:
        - filters
      additionalProperties: false
      properties:
        filters:
          description: Configuration for content filtering services that should be used for the given filtering step (input filtering or output filtering).
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/FilterConfig'

    OutputFilteringConfig:
      type: object
      required:
        - filters
      additionalProperties: false
      properties:
        filters:
          description: Configuration for content filtering services that should be used for the given filtering step (input filtering or output filtering).
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/FilterConfig'
        stream_options:
          $ref: '#/components/schemas/FilteringStreamOptions'

    FilteringStreamOptions:
      description: Stream options for output filtering. Will be ignored if stream is false.
      type: object
      additionalProperties: false
      properties:
        overlap:
          type: integer
          description: Number of characters that should be additionally sent to content filtering services from previous chunks as additional context.
          default: 0
          minimum: 0
          maximum: 10000

    FilterConfig:
      oneOf:
        - $ref: '#/components/schemas/AzureContentSafetyFilterConfig'
        - $ref: '#/components/schemas/LlamaGuard38bFilterConfig'

    AzureContentSafetyFilterConfig:
      type: object
      required:
        - type
      additionalProperties: false
      properties:
        type:
          description: Name of the filter provider type
          type: string
          enum:
            - azure_content_safety
          example: azure_content_safety
        config:
          $ref: '#/components/schemas/AzureContentSafety'

    AzureContentSafety:
      description: Filter configuration for Azure Content Safety
      type: object
      additionalProperties: false
      properties:
        Hate:
          $ref: '#/components/schemas/AzureThreshold'
        SelfHarm:
          $ref: '#/components/schemas/AzureThreshold'
        Sexual:
          $ref: '#/components/schemas/AzureThreshold'
        Violence:
          $ref: '#/components/schemas/AzureThreshold'

    AzureThreshold:
      type: integer
      enum:
        - 0
        - 2
        - 4
        - 6
      example: 0

    LlamaGuard38bFilterConfig:
      type: object
      required:
        - type
        - config
      additionalProperties: false
      properties:
        type:
          description: Name of the filter provider type
          type: string
          enum:
            - llama_guard_3_8b
          example: llama_guard_3_8b
        config:
          $ref: '#/components/schemas/LlamaGuard38b'

    LlamaGuard38b:
      description: Filter configuration for Llama Guard 3 8B
      type: object
      additionalProperties: false
      minProperties: 1
      properties:
        violent_crimes:
          type: boolean
        non_violent_crimes:
          type: boolean
        sex_crimes:
          type: boolean
        child_exploitation:
          type: boolean
        defamation:
          type: boolean
        specialized_advice:
          type: boolean
        privacy:
          type: boolean
        intellectual_property:
          type: boolean
        indiscriminate_weapons:
          type: boolean
        hate:
          type: boolean
        self_harm:
          type: boolean
        sexual_content:
          type: boolean
        elections:
          type: boolean
        code_interpreter_abuse:
          type: boolean

    # --- Masking module ---

    MaskingModuleConfig:
      type: object
      required:
        - masking_providers
      additionalProperties: false
      properties:
        masking_providers:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/MaskingProviderConfig'
          description: List of masking service providers

    MaskingProviderConfig:
      oneOf:
        - $ref: '#/components/schemas/DPIConfig'

    DPIConfig:
      type: object
      required:
        - type
        - method
        - entities
      additionalProperties: false
      properties:
        type:
          description: Type of masking service provider
          type: string
          enum:
            - sap_data_privacy_integration
        method:
          description: Type of masking method to be used
          type: string
          enum:
            - anonymization
            - pseudonymization
        entities:
          description: List of entities to be masked
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/DPIEntityConfig'
        allowlist:
          description: List of strings that should not be masked
          type: array
          example: ['SAP', 'Joule']
          items:
            type: string
        mask_grounding_input:
          type: object
          additionalProperties: false
          properties:
            enabled:
              type: boolean
              default: false
              description: controls whether the input to the grounding module will be masked with the configuration supplied in the masking module

    DPIEntityConfig:
      type: object
      required:
        - type
      additionalProperties: false
      properties:
        type:
          description: Type of entity to be masked
          allOf:
            - $ref: '#/components/schemas/DPIEntities'

    DPIEntities:
      description: Default entities supported by data privacy and integration service
      type: string
      enum:
        - profile-person
        - profile-org
        - profile-university
        - profile-location
        - profile-email
        - profile-phone
        - profile-address
        - profile-sapids-internal
        - profile-sapids-public
        - profile-url
        - profile-username-password
        - profile-nationalid
        - profile-iban
        - profile-ssn
        - profile-credit-card-number
        - profile-passport
        - profile-driverlicense
        - profile-nationality
        - profile-religious-group
        - profile-political-group
        - profile-pronouns-gender
        - profile-gender
        - profile-sexual-orientation
        - profile-trade-union
        - profile-sensitive-data

    # --- Grounding Module ---
    GroundingModuleConfig:
      type: object
      required:
        - type
        - config
      additionalProperties: false
      properties:
        type:
          type: string
          anyOf:
            - enum:
                - document_grounding_service
            - {}
          example: document_grounding_service
        config:
          type: object
          required:
            - input_params
            - output_param
          additionalProperties: false
          properties:
            filters:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/DocumentGroundingFilter'
              description: Document grounding service filters to be used
            input_params:
              type: array
              minItems: 1
              items:
                type: string
                example: groundingInput
              description: Contains the input parameters used for grounding input questions
            output_param:
              type: string
              description: Parameter name used for grounding output
              example: groundingOutput

    DocumentGroundingFilter:
      type: object
      required:
        - id
        - data_repository_type
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/GroundingFilterId'
        search_config:
          $ref: '#/components/schemas/GroundingFilterSearchConfiguration'
        data_repositories:
          type: array
          items:
            type: string
          title: DataRepositories
          description: Specify ['*'] to search across all DataRepositories or give a specific list of DataRepository ids.
          default:
            - '*'
        data_repository_type:
          $ref: '#/components/schemas/DataRepositoryType'
        data_repository_metadata:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueListPair'
          title: Datarepositorymetadata
          description: Restrict DataRepositories considered during search to those annotated with the given metadata. Useful when combined with dataRepositories=['*']
        document_metadata:
          type: array
          items:
            $ref: '#/components/schemas/SearchDocumentKeyValueListPair'
          title: Documentmetadata
          description: Restrict documents considered during search to those annotated with the given metadata.
        chunk_metadata:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueListPair'
          title: Chunkmetadata
          description: Restrict chunks considered during search to those with the given metadata.
      minProperties: 1

    GroundingFilterId:
      title: Id
      description: Identifier of this SearchFilter - unique per request.
    GroundingFilterSearchConfiguration:
      additionalProperties: false
      properties:
        max_chunk_count:
          type: integer
          minimum: 0
          exclusiveMinimum: true
          title: Maxchunkcount
          description: Maximum number of chunks to be returned. Cannot be used with 'maxDocumentCount'.
        max_document_count:
          type: integer
          minimum: 0
          exclusiveMinimum: true
          title: Maxdocumentcount
          description: "[Only supports 'vector' dataRepositoryType] - Maximum number of documents to be returned. Cannot be used with 'maxChunkCount'. If maxDocumentCount is given, then only one chunk per document is returned."
      title: SearchConfiguration
      minProperties: 0
      maxProperties: 1

    DataRepositoryType:
      type: string
      description: Only include DataRepositories with the given type.
      anyOf:
        - enum:
            - vector
            - help.sap.com
        - {}
      title: DataRepositoryType
    KeyValueListPair:
      additionalProperties: false
      properties:
        key:
          type: string
          maxLength: 1024
          title: Key
        value:
          type: array
          items:
            type: string
            maxLength: 1024
          title: Value
      type: object
      required:
        - key
        - value
      title: KeyValueListPair

    SearchDocumentKeyValueListPair:
      additionalProperties: false
      properties:
        key:
          type: string
          maxLength: 1024
          title: Key
        value:
          type: array
          items:
            type: string
            maxLength: 1024
          title: Value
        select_mode:
          type: array
          items:
            $ref: '#/components/schemas/SearchSelectOptionEnum'
          title: Selectmode
          description: Select mode for search filters
      type: object
      required:
        - key
        - value
      title: SearchDocumentKeyValueListPair
    SearchSelectOptionEnum:
      type: string
      anyOf:
        - enum:
            - ignoreIfKeyAbsent
        - {}
      title: SearchSelectOptionEnum

    ErrorResponse:
      type: object
      required:
        - request_id
        - code
        - message
        - location
      properties:
        request_id:
          type: string
          example: 'd4a67ea1-2bf9-4df7-8105-d48203ccff76'
        code:
          type: integer
          example: 400
        message:
          type: string
          example: "Model name must be one of ['gpt-4', ...]"
        location:
          type: string
          description: Where the error occurred
          example: 'LLM Module'
        module_results:
          $ref: '#/components/schemas/ModuleResults'

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    CommonError:
      description: Common Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
